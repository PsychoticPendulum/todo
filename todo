#! /usr/bin/env python3

# ======================================================================================================================

    ###############
    ### Imports ###
    ###############

# ======================================================================================================================

import os
import sys
import json
import pickle
import readline
from datetime import datetime, timedelta

try:
    from unilog import *
except:
    print("ERROR: unilog library not installed")
    exit(1)

# ======================================================================================================================

def PrintLogo(ver, cred, lic):
    print(f"{FG.CYAN}",end="")
    print(f" _____ ___  ____   ___  ")
    print(f"|_   _/ _ \|  _ \ / _ \ ")
    print(f"  | || | | | | | | | | |")
    print(f"  | || |_| | |_| | |_| |")
    print(f"  |_| \___/|____/ \___/ ")
    print(f"  {UTIL.RESET}{FG.MAGENTA}v{ver} by {cred}")
    print(f"  licensed under {lic}{UTIL.RESET}")
    print(f"")

# ======================================================================================================================

    #########################
    ### Class Definitions ###
    #########################

# ======================================================================================================================

class TODO:
    VERSION     = "2.7.1"
    CREDITS     = "luks"
    LICENSE     = "GPL3.0"

    TASKS       = []
    BASEPATH    = f"/home/{os.getlogin()}/.config/todo/"
    FILEPTR     = f"{BASEPATH}tasks.pickle"
    SETTINGSPTR = f"{BASEPATH}settings.json"
    HISTPTR     = f"{BASEPATH}history.csv"

# ======================================================================================================================

class OPTIONS:
    OPT = {
        "show_hidden":      False
    } 

# ======================================================================================================================

class TASK:
    def __init__(self, index, title, status, comment, notes, recurring, datetime, duedate, priority):
        self.index          = index
        self.title          = title
        self.status         = status
        self.comment        = comment
        self.notes          = notes
        self.recurring      = recurring
        self.datetime       = datetime
        self.duedate        = duedate
        self.priority       = priority

# ======================================================================================================================

    ################
    ### Commands ###
    ################

# ======================================================================================================================

def ExitProgram():
    ResetScreen()
    exit(0)

# ======================================================================================================================

def AddTask(args):
    if args[-1] == "?":
        HowTo("add <title>","add Do the dishes","Adds a new task titled 'Do the dishes'")
        return

    args = args.split(" ")[1:]

    title   = " ".join(args)
    comment = title
    duedate = str(GetDatetime())

    if len(args) == 0:
        return

    # index, title, status, comment, notes, recurring, datetime, duedate
    task = TASK(len(TODO.TASKS), title, False, "", [], 0, GetDatetime(), duedate, 0)
    TODO.TASKS.append(task)

# ======================================================================================================================

def CheckTask(args):
    if args[-1] == "?":
        HowTo("check <index>","check 0","Checkes or unchecks task 0")
        return

    index = GetTask(args)
    if index < 0:
        return
    TODO.TASKS[index].datetime = GetDatetime()
    TODO.TASKS[index].status = False if TODO.TASKS[index].status else True

# ======================================================================================================================

def SetPriority(args):
    if args[-1] == "?":
        HowTo("prio <index> <prio>","prio 0 2","Sets priority of task 0 to 2. Prios: 0, 1, 2")
        return

    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")
    try:
        TODO.TASKS[index].priority = int(args[2])
    except:
        return

# ======================================================================================================================

def MoveTask(args):
    if args[-1] == "?":
        HowTo("move <current index> <new index>","move 0 4","Moves task 0 to position 4")
        return

    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")
    new_position = 0
    try:
        new_position = int(args[2])
    except:
        return

    task = TODO.TASKS[index]
    del TODO.TASKS[index]
    TODO.TASKS.insert(new_position, task)
    UpdateIndeces()

# ======================================================================================================================

def RemoveTask(args):
    if args[-1] == "?":
        HowTo("remove <index>","remove 0","Removes task 0")
        HowTo("remove *","remove *","Removes every non-recurring checked task")
        return

    if args[-1] == "*":
        for task in reversed(TODO.TASKS):
            if task.status and not task.recurring:
                ParseCommand(f"remove {task.index}")
        return

    index = GetTask(args)
    if index < 0:
        return
    SaveToHistory(TODO.TASKS[index])
    del TODO.TASKS[index]
    UpdateIndeces()


def RenameTask(args):
    if args[-1] == "?":
        HowTo("rename <index>","rename 0","Renames task 0")
        return

    index = GetTask(args)
    if index < 0:
        return

    print(f"Rename task {index}")
    print(TODO.TASKS[index].title)
    TODO.TASKS[index].title = input("New Name: ")

# ======================================================================================================================

def DueTask(args):
    if args[-1] == "?":
        HowTo("due <index> <date>","due 0 20240101","Sets task 0 to be due on January 1st 2024")
        HowTo("due <index> <[+-]days>","due 0 +5","Moves due date of task 0 5 days into the future")
        HowTo("due <index> <[+-]days>","due 0 .","Sets due date of task 0 to today")
        return

    index = GetTask(args)
    if index < 0:
        return
    
    args = args.split(" ")

    if len(args) < 3:
        return

    try:
        if args[2][0] == "+":
            TODO.TASKS[index].duedate = CalculateDate(int(TODO.TASKS[index].duedate), int(args[2].split("+")[1]))
        elif args[2][0] == "-":
            TODO.TASKS[index].duedate = CalculateDate(int(TODO.TASKS[index].duedate), -int(args[2].split("-")[1]))
        elif args[2][0] == ".":
            TODO.TASKS[index].duedate = int(GetDatetime())
        else:
            TODO.TASKS[index].duedate = int(args[2])
    except:
        Log(LVL.WARN, "Invalid input, discarding changes")

# ======================================================================================================================

def SetRecurring(args):
    if args[-1] == "?":
        HowTo("rec <index> <frequency>","rec 0 7","Sets task 0 to reopen every 7 days")
        return

    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")

    try:
        TODO.TASKS[index].recurring = int(args[2])
    except:
        return

# ======================================================================================================================

def AddNote(args):
    if args[-1] == "?":
        HowTo("note <index> <content","note 0 hello world","Adds 'hello world' as note to task 0")
        return

    index = GetTask(args)
    if index < 0:
        return

    note = " ".join(args.split(" ")[2:])

    TODO.TASKS[index].notes.append(note)

# ======================================================================================================================

def ShowTask(args):
    if args[-1] == "?":
        HowTo("show <index>","show 0","Shows info about task 0")
        return

    index = GetTask(args)
    if index < 0:
        return

    ResetScreen()
    task = TODO.TASKS[index]
    status = f"{FG.GREEN}" if task else f"{FG.RED}"
    print(f"{status}{UTIL.BOLD}{UTIL.REVERSE}[{index}]    {TODO.TASKS[index].title}{UTIL.RESET}")
    print(f"")
    print(f"{UTIL.BOLD}Index:        {UTIL.RESET}{task.index}")
    print(f"{UTIL.BOLD}Title:        {UTIL.RESET}{task.title}")
    print(f"{UTIL.BOLD}Status:       {UTIL.RESET}{task.status}")
    print(f"{UTIL.BOLD}Recurring:    {UTIL.RESET}Every {task.recurring} days")
    print(f"{UTIL.BOLD}Due Date:     {UTIL.RESET}{DateToDay(task.duedate)}, {DatetimeToDate(task.duedate)}")
    print(f"{UTIL.BOLD}Priority:     {UTIL.RESET}{task.priority}")
    print(f"{UTIL.BOLD}Comment:      {UTIL.RESET}{task.comment}")
    print(f"{UTIL.BOLD}Notes:{UTIL.RESET}")
    for note in task.notes:
        print(f"- {note}")

    input("Press any key to continue ...")

# ======================================================================================================================

    #####################
    ### Functionality ###
    #####################

# ======================================================================================================================

def SaveToHistory(task):
    if not os.path.isfile(TODO.HISTPTR):
        file = open(TODO.HISTPTR, "a")
        file.write("datetime,title,comment,notes\n")
        file.close()
    file = open(TODO.HISTPTR, "a")
    log = f"{task.datetime},{task.title},{task.comment},"
    for note in task.notes:
        log += f"{note};"
    file.write(f"{log}\n")
    file.close()

# ======================================================================================================================

def HowTo(usage, example, description):
    print(f"{UTIL.BOLD}Usage:        {UTIL.RESET}{usage}")
    print(f"{UTIL.BOLD}Example:      {UTIL.RESET}{example}")
    print(f"{UTIL.BOLD}Description:  {UTIL.RESET}{description}")
    input("Press any key to continue ...")

# ======================================================================================================================

def ListEntries():
    for task in TODO.TASKS:
        if task.recurring and task.status and not OPTIONS.OPT["show_hidden"]:
            continue

        status  = f"{FG.GREEN}{UTIL.STRIKETHROUGH}" if task.status else f"{FG.YELLOW}"
        rec     = f"{FG.CYAN}*{UTIL.RESET}" if task.recurring else ""

        style = ""
        if GetDatetime() == int(task.duedate):
            style = f"{UTIL.BOLD}"

        due     = f"{FG.CYAN}"
        try:
            if not task.status:
                if int(GetDatetime()) > int(task.duedate):
                    due += f"{FG.CYAN}!?"
                    status = f"{FG.RED}"
        except:
            pass

        
        datetime = GetDatetime()
        timediff = GetDifferenceInDays(int(task.duedate), int(datetime))
        remaining_time = f"({timediff} days)"
        if 0 <= timediff < 7:
            remaining_time = f"({UTIL.UNDERLINE}{DateToDay(task.duedate)}{UTIL.RESET})"
        if task.status:
            remaining_time = ""

        prio = ""
        if task.priority > 0:
            prio += f"{UTIL.UNDERLINE}"
        if task.priority > 1:
            prio += f"{UTIL.REVERSE}"

        print(f"[{task.index}]\t{rec}{due}{status}{prio}{style}{task.title}{UTIL.RESET} {remaining_time}")

# ======================================================================================================================

def GetDatetime():
    now = datetime.now()
    current_date = now.strftime("%Y%m%d")
    return int(current_date)

# ======================================================================================================================

def CalculateDate(date, delta):
    date_format = "%Y%m%d"
    try:
        date        = datetime.strptime(str(date), date_format)
        date        = date + timedelta(days=delta)
        return      date.strftime("%Y%m%d")
    except:
        Log(LVL.WARN, "Invalid date")
        return date

# ======================================================================================================================

def GetDifferenceInDays(date0, date1):
    date_format = "%Y%m%d"
    try:
        date0       = datetime.strptime(str(date0), date_format)
        date1       = datetime.strptime(str(date1), date_format)
        diff        = date0 - date1
        return int(diff.days)
    except:
        Log(LVL.WARN, f"Invalid due date: {date1}")
        return 0

# ======================================================================================================================

def DatetimeToDate(date):
    date_object = datetime.strptime(str(date), "%Y%m%d")
    return date_object.strftime("%B %d %Y")

# ======================================================================================================================

def DateToDay(date):
    if int(date) == GetDatetime():
        return "Today"
    elif int(date) == GetDatetime() + 1:
        return "Tomorrow"

    date_format = "%Y%m%d"
    try:
        date        = datetime.strptime(str(date), date_format)
        weekday     = date.weekday()
    except:
        weekday = -1

    match int(weekday):
        case 0: return "Monday"
        case 1: return "Tuesday"
        case 2: return "Wednesday"
        case 3: return "Thursday"
        case 4: return "Friday"
        case 5: return "Saturday"
        case 6: return "Sunday"
        case _: return "undefined"

# ======================================================================================================================

def GetTask(args):
    args = args.split(" ")[1:]

    index = 0
    if len(args) == 0:
        try:
            index = int(input(f"Index ({len(TODO.TASKS)-1}): "))
        except:
            return -1
    else:
        try:
            index = int(args[0])
        except:
            return -1

    if index > len(TODO.TASKS)-1:
        return -1

    return index

# ======================================================================================================================

def UpdateIndeces():
    index = 0
    for task in TODO.TASKS:
        task.index = index
        index += 1

# ======================================================================================================================

def ResetScreen():
    print(f"{UTIL.CLEAR}{UTIL.TOP}",end="")
    PrintLogo(TODO.VERSION, TODO.CREDITS, TODO.LICENSE)

# ======================================================================================================================

def Usage():
    print(f"Usage: todo.py [file]")
    print(f"")
    print(f"{UTIL.BOLD}Description:{UTIL.RESET}")
    print(f"    Simple tool to manage todo lists")
    print(f"")
    print(f"{UTIL.BOLD}Commands:{UTIL.RESET}")
    print(f"    help                show this menu")
    print(f"    exit                closed the program")
    print(f"    settings            display all settings and their values")
    print(f"    set                 set an settings")
    print(f"")
    print(f"    add                 add a new task")
    print(f"    check               change state of task")
    print(f"    prio                change priority of task")
    print(f"    move                move position of task")
    print(f"    remove              remove task")
    print(f"    rename              rename task")
    print(f"    due                 set due date")
    print(f"    rec                 set recurring")
    print(f"    note                add note")
    print(f"    show                show more info about task")
    print(f"")

# ======================================================================================================================

def LoadTasks():
    tasks = []
    try:
        with open(TODO.FILEPTR, "rb") as file:
            tasks = pickle.load(file)
    except:
        Log(LVL.WARN, f"Error reading file: {UTIL.UNDERLINE}{TODO.FILEPTR}")

    for task in tasks:
        timediff = GetDatetime() - int(task.duedate)
        if timediff >= task.recurring and task.recurring != 0:
            task.status = False
            task.duedate = GetDatetime()

    return tasks

# ======================================================================================================================

def SaveTasks():
    with open(TODO.FILEPTR, "wb") as file:
        pickle.dump(TODO.TASKS, file)    

# ======================================================================================================================

    ################
    ### Settings ###
    ################

# ======================================================================================================================

def CheckDirectories():
    if not os.path.isdir(TODO.BASEPATH):
        os.makedirs(TODO.BASEPATH)

# ======================================================================================================================

def DisplaySettings():
    ResetScreen()
    print(f"{UTIL.BOLD}Settings:{UTIL.RESET}")
    for option, value in OPTIONS.OPT.items():
        buffer = " " * (16 - len(option))
        print(f"{option}{buffer}{value}")
    input("Press any key to continue ...")

# ======================================================================================================================

def SetSettings(cmd):
    cmd = cmd.split(" ")[1:]
    
    if len(cmd) < 2:
        return

    match cmd[0]:
        case "show_hidden":
            OPTIONS.OPT["show_hidden"] = True if cmd[1] == "true" else False
        case _:
            Log(LVL.WARN, f"Unknown option: {UTIL.UNDERLINE}{cmd[0]}")

    SaveSettings()

# ======================================================================================================================

def SaveSettings():
    data = json.dumps(OPTIONS.OPT)
    try:
        file = open(TODO.SETTINGSPTR, "w")
        file.write(data)
        file.close()
    except:
        Log(LVL.WARN, "Unable to save settings ...")

# ======================================================================================================================

def LoadSettings():
    try:
        file = open(TODO.SETTINGSPTR, "r")
        data = file.read()
        file.close()
        OPTIONS.OPT = json.loads(data)
    except:
        Log(LVL.WARN, "Couldn't read settings file ...")


# ======================================================================================================================

    #################
    ### Interface ###
    #################

# ======================================================================================================================

def Prompt():
    ResetScreen() 
    ListEntries()
    cmd = input(f"{UTIL.BOLD}>>{UTIL.RESET} ")
    ParseCommand(cmd)
    SaveTasks() 


def ParseCommand(cmd):
    base_command = cmd.split(" ")[0]
    match base_command.lower():
        case "help":
            ResetScreen()
            Usage()
            input("Press any key to continue ...")
        
        case "exit":
            ExitProgram()

        case "settings":
            DisplaySettings()

        case "set":
            SetSettings(cmd)

        case "add":
            AddTask(cmd)

        case "check":
            CheckTask(cmd)
        
        case "prio":
            SetPriority(cmd)

        case "move":
            MoveTask(cmd)

        case "remove":
            RemoveTask(cmd)

        case "rename":
            RenameTask(cmd)
    
        case "due":
            DueTask(cmd)

        case "rec":
            SetRecurring(cmd)

        case "note":
            AddNote(cmd)
        
        case "show":
            ShowTask(cmd)

        case "":
            pass
        
        case _:
            Log(LVL.WARN, f"Unknown command: {UTIL.UNDERLINE}{base_command}")
   

# ======================================================================================================================

    #######################
    ### Initialization  ###
    #######################

# ======================================================================================================================

def main(argv):
    if len(argv) > 0:
        if argv[0] == "--help":
            Usage()
            exit()
        elif argv[0] == "--version":
            print(TODO.VERSION)
            exit()
        else:
            TODO.FILEPTR = argv[0]
    
    CheckDirectories()
    LoadSettings()
    TODO.TASKS = LoadTasks()

    while True:
        try:
            Prompt()
        except KeyboardInterrupt:
            exit(0)

# ======================================================================================================================

if __name__ == "__main__":
    main(sys.argv[1:])
