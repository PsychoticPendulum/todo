#! /usr/bin/env python3

# ======================================================================================================================

    ###############
    ### Imports ###
    ###############

# ======================================================================================================================

import os
import sys
import pickle
import readline
from datetime import datetime

try:
    from unilog import *
except:
    print("ERROR: unilog library not installed")
    exit(1)

# ======================================================================================================================

def PrintLogo(ver, cred, lic):
    print(f"{FG.CYAN}",end="")
    print(f" _____ ___  ____   ___  ")
    print(f"|_   _/ _ \|  _ \ / _ \ ")
    print(f"  | || | | | | | | | | |")
    print(f"  | || |_| | |_| | |_| |")
    print(f"  |_| \___/|____/ \___/ ")
    print(f"  {UTIL.RESET}{FG.MAGENTA}v{ver} by {cred}")
    print(f"  licensed under {lic}{UTIL.RESET}")
    print(f"")

# ======================================================================================================================

    #########################
    ### Class Definitions ###
    #########################

# ======================================================================================================================

class TODO:
    VERSION     = "2.2.0"
    CREDITS     = "luks"
    LICENSE     = "GPL3.0"

    TASKS       = []
    FILEPTR     = "tasks.pickle"

# ======================================================================================================================

class OPTIONS:
    SHOW_HIDDEN     = False

# ======================================================================================================================

class TASK:
    def __init__(self, index, title, status, comment, notes, recurring, datetime, duedate, priority):
        self.index          = index
        self.title          = title
        self.status         = status
        self.comment        = comment
        self.notes          = notes
        self.recurring      = recurring
        self.datetime       = datetime
        self.duedate        = duedate
        self.priority       = priority

# ======================================================================================================================

    ################
    ### Commands ###
    ################

# ======================================================================================================================

def ExitProgram():
    ResetScreen()
    exit(0)

# ======================================================================================================================

def AddTask(args):
    args = args.split(" ")[1:]

    title   = " ".join(args)
    comment = title
    duedate = str(GetDatetime())

    if len(args) == 0:
        title       = input("Enter Title:           ")
        duedate     = input("Due Date (YYYYMMDD):   ")
    comment     = input("Enter Comment:         ")

    # index, title, status, comment, notes, recurring, datetime, duedate
    task = TASK(len(TODO.TASKS), title, False, comment, [], False, GetDatetime(), duedate, 0)
    TODO.TASKS.append(task)

# ======================================================================================================================

def CheckTask(args):
    index = GetTask(args)
    if index < 0:
        return
    TODO.TASKS[index].datetime = GetDatetime()
    TODO.TASKS[index].status = False if TODO.TASKS[index].status else True

# ======================================================================================================================

def SetPriority(args):
    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")
    try:
        TODO.TASKS[index].priority = int(args[2])
    except:
        return

# ======================================================================================================================

def MoveTask(args):
    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")
    new_position = 0
    try:
        new_position = int(args[2])
    except:
        return

    task = TODO.TASKS[index]
    del TODO.TASKS[index]
    TODO.TASKS.insert(new_position, task)
    UpdateIndeces()

# ======================================================================================================================

def SaveToHistory(task):
    file = open("todo.history", "a")
    log = f"{task.datetime},{task.title},{task.comment},"
    for note in task.notes:
        log += f"{note};"
    file.write(log)
    file.close()

# ======================================================================================================================

def RemoveTask(args):
    index = GetTask(args)
    if index < 0:
        return
    SaveToHistory(TODO.TASKS[index])
    del TODO.TASKS[index]
    UpdateIndeces()

# ======================================================================================================================

def DueTask(args):
    index = GetTask(args)
    if index < 0:
        return
    
    args = args.split(" ")

    if len(args) < 3:
        return

    try:
        if args[2][0] == "+":
            TODO.TASKS[index].duedate = int(TODO.TASKS[index].duedate) + int(args[2].split("+")[1])
        elif args[2][0] == "-":
            TODO.TASKS[index].duedate = int(TODO.TASKS[index].duedate) - int(args[2].split("-")[1])
        elif args[2][0] == ".":
            TODO.TASKS[index].duedate = int(GetDatetime())
        else:
            TODO.TASKS[index].duedate = int(args[2])
    except:
        Log(LVL.WARN, "Invalid input, discarding changes")

# ======================================================================================================================

def SetRecurring(args):
    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")
    frequency = 0
    if len(args) < 3:
        frequency = input(f"{FG.CYAN}(o)ff, (d)aily, (w)eekly, (m)onthly, (y)early{UTIL.RESET}: ")
    else:
        frequency = args[2]

    recurring = ["o", "d", "w", "m", "y"]
    for i in range(len(recurring)):
        if recurring[i] == frequency:
            TODO.TASKS[index].recurring = i
            return

    Log(LVL.WARN, f"Invalid recurring time.\nPossible are {FG.CYAN}(o)ff, (d)aily, (w)eekly, (m)onthly, (y)early")

# ======================================================================================================================

def AddNote(args):
    index = GetTask(args)
    if index < 0:
        return
    TODO.TASKS[index].notes.append(input("Add Note: "))

# ======================================================================================================================

def ShowTask(args):
    index = GetTask(args)
    if index < 0:
        return

    ResetScreen()
    task = TODO.TASKS[index]
    status = f"{FG.GREEN}" if task else f"{FG.RED}"
    print(f"{status}{UTIL.BOLD}{UTIL.REVERSE}[{index}]    {TODO.TASKS[index].title}{UTIL.RESET}")
    print(f"")
    print(f"{UTIL.BOLD}Index:        {UTIL.RESET}{task.index}")
    print(f"{UTIL.BOLD}Title:        {UTIL.RESET}{task.title}")
    print(f"{UTIL.BOLD}Status:       {UTIL.RESET}{task.status}")
    print(f"{UTIL.BOLD}Recurring:    {UTIL.RESET}{GetRecString(task.recurring)}")
    print(f"{UTIL.BOLD}Due Date:     {UTIL.RESET}{task.duedate}")
    print(f"{UTIL.BOLD}Priority:     {UTIL.RESET}{task.priority}")
    print(f"{UTIL.BOLD}Comment:      {UTIL.RESET}{task.comment}")
    print(f"{UTIL.BOLD}Notes:{UTIL.RESET}")
    for note in task.notes:
        print(f"- {note}")

    input()

# ======================================================================================================================

    #####################
    ### Functionality ###
    #####################

# ======================================================================================================================

def ListEntries():
    for task in TODO.TASKS:
        if task.recurring and task.status and not OPTIONS.SHOW_HIDDEN:
            continue

        status  = f"{FG.GREEN}{UTIL.STRIKETHROUGH}" if task.status else f"{FG.YELLOW}"
        rec     = f"{FG.CYAN}*{UTIL.RESET}" if task.recurring else ""

        due     = f"{FG.CYAN}"
        try:
            if int(GetDatetime()) == int(task.duedate):
                due += f"!" 
            elif int(GetDatetime()) > int(task.duedate):
                due += f"{FG.CYAN}!?"
                status = f"{FG.RED}"
        except:
            pass

        datetime = int(GetDatetime())
        remaining_time = f"({int(task.duedate)-datetime} days)"
        if int(task.duedate) - datetime < 7:
            remaining_time = f"({DateToDay(str(task.duedate))})"

        prio = ""
        if task.priority > 0:
            prio += f"{UTIL.BOLD}"
        if task.priority > 1:
            prio += f"{UTIL.UNDERLINE}"

        print(f"[{task.index}]\t{rec}{due}{status}{prio}{task.title}{UTIL.RESET} {remaining_time}")

# ======================================================================================================================

def Updater(field, text):
    print(f"{UTIL.CLEARLINE}{UTIL.BOLD}{field}:\n{UTIL.RESET}{FG.BLACK}{text}",end="")
    buffer = f"{UTIL.LEFT}" * len(text)
    print(f"{buffer}{UTIL.RESET}",end="")
    new_text = input()
    return new_text if len(new_text) else text

# ======================================================================================================================

def GetRecString(rec):
    recurring = [ "off", "daily", "weekly", "monthly", "yearly" ]
    if rec > len(recurring):
        return "invalid value"
    return recurring[rec]

# ======================================================================================================================

def GetDatetime():
    now = datetime.now()
    current_date = now.strftime("%Y%m%d")
    return int(current_date)

# ======================================================================================================================

def DateToDay(date):
    date_format = "%Y%m%d"
    date        = datetime.strptime(date, date_format)
    weekday     = date.weekday()
    match int(weekday):
        case 0: return "Monday"
        case 1: return "Tuesday"
        case 2: return "Wednesday"
        case 3: return "Thursday"
        case 4: return "Friday"
        case 5: return "Saturday"
        case 6: return "Sunday"
        case _: return "Christmas"

# ======================================================================================================================

def GetTask(args):
    args = args.split(" ")[1:]

    index = 0
    if len(args) == 0:
        try:
            index = int(input(f"Index ({len(TODO.TASKS)-1}): "))
        except:
            return -1
    else:
        try:
            index = int(args[0])
        except:
            return -1

    if index > len(TODO.TASKS)-1:
        return -1

    return index

# ======================================================================================================================

def UpdateIndeces():
    index = 0
    for task in TODO.TASKS:
        task.index = index
        index += 1

# ======================================================================================================================

def ResetScreen():
    print(f"{UTIL.CLEAR}{UTIL.TOP}",end="")
    PrintLogo(TODO.VERSION, TODO.CREDITS, TODO.LICENSE)

# ======================================================================================================================

def Usage():
    print(f"Usage: todo.py [file]")
    print(f"")
    print(f"{UTIL.BOLD}Description:{UTIL.RESET}")
    print(f"    Simple tool to manage todo lists")
    print(f"")
    print(f"{UTIL.BOLD}Commands:{UTIL.RESET}")
    print(f"    help                show this menu")
    print(f"    exit                closed the program")
    print(f"")
    print(f"    add                 add a new task")
    print(f"    check               change state of task")
    print(f"    prio                change priority of task")
    print(f"    move                move position of task")
    print(f"    remove              remove task")
    print(f"    due                 set due date")
    print(f"    rec                 set recurring")
    print(f"    note                add note")
    print(f"    show                show more info about task")
    print(f"")

# ======================================================================================================================

def LoadTasks():
    tasks = []
    try:
        with open(TODO.FILEPTR, "rb") as file:
            tasks = pickle.load(file)
    except:
        Log(LVL.WARN, f"Error reading file: {UTIL.UNDERLINE}{TODO.FILEPTR}")

    for task in tasks:
        if task.recurring and (GetDatetime() - task.datetime > 1):
            task.status = False
            task.duedate = GetDatetime()

    return tasks

# ======================================================================================================================

def SaveTasks():
    with open(TODO.FILEPTR, "wb") as file:
        pickle.dump(TODO.TASKS, file)    

# ======================================================================================================================

    ###############
    ### Options ###
    ###############

def SetOption(cmd):
    cmd = cmd.split(" ")[1:]
    
    if len(cmd) < 2:
        return

    match cmd[0]:
        case "show_hidden":
            OPTIONS.SHOW_HIDDEN = True if cmd[1] == "true" else False
        case _:
            Log(LVL.WARN, f"Unknown option: {UTIL.UNDERLINE}{cmd[0]}")

# ======================================================================================================================

# ======================================================================================================================

    #################
    ### Interface ###
    #################

# ======================================================================================================================

def Prompt():
    ResetScreen() 
    ListEntries()
    cmd = input(f"{UTIL.BOLD}>>{UTIL.RESET} ").lower()
    base_command = cmd.split(" ")[0]
    match base_command:
        case "help":
            ResetScreen()
            Usage()
            input("Press any key to continue ...")
        
        case "exit":
            ExitProgram()

        case "add":
            AddTask(cmd)

        case "check":
            CheckTask(cmd)
        
        case "move":
            MoveTask(cmd)

        case "remove":
            RemoveTask(cmd)

        case "show":
            ShowTask(cmd)

        case "due":
            DueTask(cmd)

        case "note":
            AddNote(cmd)
        
        case "rec":
            SetRecurring(cmd)

        case "prio":
            SetPriority(cmd)

        case "set":
            SetOption(cmd)

        case "":
            pass
        
        case _:
            Log(LVL.WARN, f"Unknown command: {UTIL.UNDERLINE}{base_command}")
   
    SaveTasks() 

# ======================================================================================================================

    #######################
    ### Initialization  ###
    #######################

# ======================================================================================================================

def main(argv):
    if len(argv) > 0:
        if argv[0] == "--help":
            Usage()
            exit()
        elif argv[0] == "--version":
            print(TODO.VERSION)
            exit()
        else:
            TODO.FILEPTR = argv[0]

    TODO.TASKS = LoadTasks()

    while True:
        try:
            Prompt()
        except KeyboardInterrupt:
            exit(0)

# ======================================================================================================================

if __name__ == "__main__":
    main(sys.argv[1:])

# ======================================================================================================================
