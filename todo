#! /usr/bin/env python3

import os
import sys
import pickle
import readline
from unilog import *
from datetime import datetime


def PrintLogo(ver, cred, lic):
    print(f"{FG.CYAN}",end="")
    print(f" _____ ___  ____   ___  ")
    print(f"|_   _/ _ \|  _ \ / _ \ ")
    print(f"  | || | | | | | | | | |")
    print(f"  | || |_| | |_| | |_| |")
    print(f"  |_| \___/|____/ \___/ ")
    print(f"  {UTIL.RESET}{FG.MAGENTA}v{ver} by {cred}")
    print(f"  licensed under {lic}{UTIL.RESET}")
    print(f"")


#########################
### Class Definitions ###
#########################

class TODO:
    VERSION     = "2.0.0"
    CREDITS     = "luks"
    LICENSE     = "GPL3.0"

    TASKS       = []
    FILEPTR     = "tasks.pickle"


class TASK:
    def __init__(self, index, title, status, comment, notes, recurring, datetime, duedate, priority):
        self.index          = index
        self.title          = title
        self.status         = status
        self.comment        = comment
        self.notes          = notes
        self.recurring      = recurring
        self.datetime       = datetime
        self.duedate        = duedate
        self.priority       = priority


################
### Commands ###
################


def ExitProgram():
    ResetScreen()
    exit(0)


def ListEntries():
    for task in TODO.TASKS:
        status  = f"{FG.GREEN}" if task.status else f"{FG.YELLOW}"
        rec     = f"{FG.CYAN}*{UTIL.RESET}" if task.recurring else ""

        due     = f"{FG.CYAN}"
        try:
            if int(GetDatetime()) == int(task.duedate):
                due += f"!" 
            elif int(GetDatetime()) > int(task.duedate):
                due += f"{FG.CYAN}!?"
                status = f"{FG.RED}"
        except:
            pass

        prio = ""
        if task.priority > 0:
            prio += f"{UTIL.BOLD}"
        if task.priority > 1:
            prio += f"{UTIL.UNDERLINE}"

        print(f"[{task.index}]\t{rec}{due}{status}{prio}{task.title}{UTIL.RESET}")


def AddTask(args):
    args = args.split(" ")[1:]

    title   = " ".join(args)
    comment = title
    duedate = "99999999"

    if len(args) == 0:
        title       = input("Enter Title:           ")
        comment     = input("Enter Comment:         ")
        duedate     = input("Due Date (YYYYMMDD):   ")

    # index, title, status, comment, notes, recurring, datetime, duedate
    task = TASK(len(TODO.TASKS), title, False, comment, [], False, GetDatetime(), duedate, 0)
    TODO.TASKS.append(task)


def CheckTask(args):
    index = GetTask(args)
    if index < 0:
        return
    TODO.TASKS[index].datetime = GetDatetime()
    TODO.TASKS[index].status = False if TODO.TASKS[index].status else True


def MoveTask(args):
    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")
    new_position = 0
    try:
        new_position = int(args[2])
    except:
        return

    task = TODO.TASKS[index]
    del TODO.TASKS[index]
    TODO.TASKS.insert(new_position, task)
    UpdateIndeces()


def SetRecurring(args):
    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")
    frequency = 0
    if len(args) < 3:
        frequency = input(f"{FG.CYAN}(o)ff, (d)aily, (w)eekly, (m)onthly, (y)early{UTIL.RESET}: ")
    else:
        frequency = args[2]

    recurring = ["o", "d", "w", "m", "y"]
    for i in range(len(recurring)):
        if recurring[i] == frequency:
            TODO.TASKS[index].recurring = i
            return

    Log(LVL.WARN, f"Invalid recurring time.\nPossible are {FG.CYAN}(o)ff, (d)aily, (w)eekly, (m)onthly, (y)early")


def SetPriority(args):
    index = GetTask(args)
    if index < 0:
        return

    args = args.split(" ")
    try:
        TODO.TASKS[index].priority = int(args[2])
    except:
        return


def RemoveTask(args):
    index = GetTask(args)
    if index < 0:
        return
    del TODO.TASKS[index]
    UpdateIndeces()


def AddNote(args):
    index = GetTask(args)
    if index < 0:
        return
    TODO.TASKS[index].notes.append(input("Add Note: "))


def ShowTask(args):
    index = GetTask(args)
    if index < 0:
        return

    ResetScreen()
    task = TODO.TASKS[index]
    status = f"{FG.GREEN}" if task else f"{FG.RED}"
    print(f"{status}{UTIL.BOLD}{UTIL.REVERSE}[{index}]    {TODO.TASKS[index].title}{UTIL.RESET}")
    print(f"")
    print(f"{UTIL.BOLD}Index:        {UTIL.RESET}{task.index}")
    print(f"{UTIL.BOLD}Title:        {UTIL.RESET}{task.title}")
    print(f"{UTIL.BOLD}Status:       {UTIL.RESET}{task.status}")
    print(f"{UTIL.BOLD}Recurring:    {UTIL.RESET}{GetRecString(task.recurring)}")
    print(f"{UTIL.BOLD}Due Date:     {UTIL.RESET}{task.duedate}")
    print(f"{UTIL.BOLD}Priority:     {UTIL.RESET}{task.priority}")
    print(f"{UTIL.BOLD}Comment:      {UTIL.RESET}{task.comment}")
    print(f"{UTIL.BOLD}Notes:{UTIL.RESET}")
    for note in task.notes:
        print(f"- {note}")

    input()


def DueTask(args):
    index = GetTask(args)
    if index < 0:
        return
    
    args = args.split(" ")

    TODO.TASKS[index].duedate = args[2]



#####################
### Functionality ###
#####################

def Updater(field, text):
    print(f"{UTIL.CLEARLINE}{UTIL.BOLD}{field}:\n{UTIL.RESET}{FG.BLACK}{text}",end="")
    buffer = f"{UTIL.LEFT}" * len(text)
    print(f"{buffer}{UTIL.RESET}",end="")
    new_text = input()
    return new_text if len(new_text) else text


def GetRecString(rec):
    recurring = [ "off", "daily", "weekly", "monthly", "yearly" ]
    if rec > len(recurring):
        return "invalid value"
    return recurring[rec]


def GetDatetime():
    now = datetime.now()
    current_date = now.strftime("%Y%m%d")
    return int(current_date)
def GetTask(args):
    args = args.split(" ")[1:]

    index = 0
    if len(args) == 0:
        try:
            index = int(input(f"Index ({len(TODO.TASKS)-1}): "))
        except:
            return -1
    else:
        try:
            index = int(args[0])
        except:
            return -1

    if index > len(TODO.TASKS)-1:
        return -1

    return index


def UpdateIndeces():
    index = 0
    for task in TODO.TASKS:
        task.index = index
        index += 1


def ResetScreen():
    print(f"{UTIL.CLEAR}{UTIL.TOP}",end="")
    PrintLogo(TODO.VERSION, TODO.CREDITS, TODO.LICENSE)


def Usage():
    print(f"Usage: todo.py [file]")
    print(f"")
    print(f"{UTIL.BOLD}Description:{UTIL.RESET}")
    print(f"    Simple tool to manage todo lists")
    print(f"")
    print(f"{UTIL.BOLD}Commands:{UTIL.RESET}")
    print(f"    help                show this menu")
    print(f"    exit                closed the program")
    print(f"    add                 add a new task")
    print(f"    check               change state of task")
    print(f"    move                move position of task")
    print(f"    remove              remove task")
    print(f"    show                show more info about task")
    print(f"    due                 set due date")
    print(f"    note                add note")
    print(f"    rec                 set recurring")
    print(f"    prio                change priority of task")
    print(f"")


def LoadTasks():
    tasks = []
    try:
        with open(TODO.FILEPTR, "rb") as file:
            tasks = pickle.load(file)
    except:
        Log(LVL.WARN, f"Error reading file: {UTIL.UNDERLINE}{TODO.FILEPTR}")

    for task in tasks:
        datetime = GetDatetime()
        match task.recurring:
            case 1: # daily
                task.status = bool(task.datetime + 1 < datetime)
            case 2: # weekly
                task.status = bool(task.datetime + 7 < datetime)
            case 3: # monthly
                task.status = bool(task.datetime + 30 < datetime)
            case 4: # yearly
                task.status = bool(task.datetime + 365 < datetime)

    return tasks


def SaveTasks():
    with open(TODO.FILEPTR, "wb") as file:
        pickle.dump(TODO.TASKS, file)    


# TODO: Add Due Date

#################
### Interface ###
#################

def Prompt():
    ResetScreen() 
    ListEntries()
    cmd = input(f"{UTIL.BOLD}>>{UTIL.RESET} ")
    base_command = cmd.split(" ")[0]
    match base_command:
        case "help":
            ResetScreen()
            Usage()
            input("Press any key to continue ...")
        
        case "exit":
            ExitProgram()

        case "add":
            AddTask(cmd)

        case "check":
            CheckTask(cmd)
        
        case "move":
            MoveTask(cmd)

        case "remove":
            RemoveTask(cmd)

        case "show":
            ShowTask(cmd)

        case "due":
            DueTask(cmd)

        case "note":
            AddNote(cmd)
        
        case "rec":
            SetRecurring(cmd)

        case "prio":
            SetPriority(cmd)

        case "":
            pass
        
        case _:
            Log(LVL.WARN, f"Unknown command: {UTIL.UNDERLINE}{base_command}")
   
    SaveTasks() 


#######################
### Initialization  ###
#######################

def main(argv):
    if len(argv) > 0 and argv[0] == "--help":
        Usage()
        exit()

    TODO.TASKS = LoadTasks()

    while True:
        try:
            Prompt()
        except KeyboardInterrupt:
            exit(0)


if __name__ == "__main__":
    main(sys.argv[1:])

